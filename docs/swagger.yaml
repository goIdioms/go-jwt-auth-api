basePath: /api
definitions:
  models.SignInInput:
    properties:
      email:
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
    required:
    - email
    - password
    type: object
  models.SignUpInput:
    properties:
      email:
        type: string
      name:
        maxLength: 50
        minLength: 2
        type: string
      password:
        maxLength: 100
        minLength: 8
        type: string
      password_confirm:
        maxLength: 100
        minLength: 8
        type: string
      photo:
        type: string
    required:
    - email
    - name
    - password
    - password_confirm
    type: object
host: localhost:8000
info:
  contact:
    email: support@example.com
    name: API Support
    url: http://www.example.com/support
  description: API для аутентификации и авторизации с использованием JWT токенов
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  termsOfService: http://swagger.io/terms/
  title: JWT Authentication API
  version: "1.0"
paths:
  /logout:
    get:
      description: Удаляет refresh токен и очищает куки
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Выход пользователя
      tags:
      - auth
  /refresh:
    post:
      consumes:
      - application/json
      description: Обновляет access и refresh токены
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Обновление токена
      tags:
      - auth
  /sign-in:
    post:
      consumes:
      - application/json
      description: Аутентификация пользователя и выдача токенов
      parameters:
      - description: Данные для входа
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SignInInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Вход пользователя
      tags:
      - auth
  /sign-up:
    post:
      consumes:
      - application/json
      description: Создает нового пользователя
      parameters:
      - description: Данные для регистрации
        in: body
        name: input
        required: true
        schema:
          $ref: '#/definitions/models.SignUpInput'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Регистрация пользователя
      tags:
      - auth
  /users/:
    get:
      description: Доступно только для ролей admin и moderator
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Получить список пользователей
      tags:
      - users
  /users/me:
    get:
      description: Возвращает данные текущего пользователя
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
      summary: Получить информацию о себе
      tags:
      - users
schemes:
- http
securityDefinitions:
  BearerAuth:
    description: 'Используйте формат: "Bearer {token}"'
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
